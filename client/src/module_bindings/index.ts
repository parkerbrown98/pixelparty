// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddPixel } from "./add_pixel_reducer.ts";
export { AddPixel };
import { ClearBoard } from "./clear_board_reducer.ts";
export { ClearBoard };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateBoard } from "./create_board_reducer.ts";
export { CreateBoard };
import { DeleteMessage } from "./delete_message_reducer.ts";
export { DeleteMessage };
import { ErasePixel } from "./erase_pixel_reducer.ts";
export { ErasePixel };
import { JoinBoard } from "./join_board_reducer.ts";
export { JoinBoard };
import { LeaveBoard } from "./leave_board_reducer.ts";
export { LeaveBoard };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetColor } from "./set_color_reducer.ts";
export { SetColor };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { SetTool } from "./set_tool_reducer.ts";
export { SetTool };

// Import and reexport all table handle types
import { BoardTableHandle } from "./board_table.ts";
export { BoardTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { PixelTableHandle } from "./pixel_table.ts";
export { PixelTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Board } from "./board_type.ts";
export { Board };
import { Message } from "./message_type.ts";
export { Message };
import { Pixel } from "./pixel_type.ts";
export { Pixel };
import { ToolType } from "./tool_type_type.ts";
export { ToolType };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    board: {
      tableName: "board",
      rowType: Board.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Board.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Message.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    pixel: {
      tableName: "pixel",
      rowType: Pixel.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Pixel.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: User.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    add_pixel: {
      reducerName: "add_pixel",
      argsType: AddPixel.getTypeScriptAlgebraicType(),
    },
    clear_board: {
      reducerName: "clear_board",
      argsType: ClearBoard.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_board: {
      reducerName: "create_board",
      argsType: CreateBoard.getTypeScriptAlgebraicType(),
    },
    delete_message: {
      reducerName: "delete_message",
      argsType: DeleteMessage.getTypeScriptAlgebraicType(),
    },
    erase_pixel: {
      reducerName: "erase_pixel",
      argsType: ErasePixel.getTypeScriptAlgebraicType(),
    },
    join_board: {
      reducerName: "join_board",
      argsType: JoinBoard.getTypeScriptAlgebraicType(),
    },
    leave_board: {
      reducerName: "leave_board",
      argsType: LeaveBoard.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_color: {
      reducerName: "set_color",
      argsType: SetColor.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    set_tool: {
      reducerName: "set_tool",
      argsType: SetTool.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddPixel", args: AddPixel }
| { name: "ClearBoard", args: ClearBoard }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateBoard", args: CreateBoard }
| { name: "DeleteMessage", args: DeleteMessage }
| { name: "ErasePixel", args: ErasePixel }
| { name: "JoinBoard", args: JoinBoard }
| { name: "LeaveBoard", args: LeaveBoard }
| { name: "SendMessage", args: SendMessage }
| { name: "SetColor", args: SetColor }
| { name: "SetName", args: SetName }
| { name: "SetTool", args: SetTool }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addPixel(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    AddPixel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_pixel", __argsBuffer, this.setCallReducerFlags.addPixelFlags);
  }

  onAddPixel(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("add_pixel", callback);
  }

  removeOnAddPixel(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("add_pixel", callback);
  }

  clearBoard() {
    this.connection.callReducer("clear_board", new Uint8Array(0), this.setCallReducerFlags.clearBoardFlags);
  }

  onClearBoard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("clear_board", callback);
  }

  removeOnClearBoard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("clear_board", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createBoard(name: string, colors: string[]) {
    const __args = { name, colors };
    let __writer = new BinaryWriter(1024);
    CreateBoard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_board", __argsBuffer, this.setCallReducerFlags.createBoardFlags);
  }

  onCreateBoard(callback: (ctx: ReducerEventContext, name: string, colors: string[]) => void) {
    this.connection.onReducer("create_board", callback);
  }

  removeOnCreateBoard(callback: (ctx: ReducerEventContext, name: string, colors: string[]) => void) {
    this.connection.offReducer("create_board", callback);
  }

  deleteMessage(messageId: number) {
    const __args = { messageId };
    let __writer = new BinaryWriter(1024);
    DeleteMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_message", __argsBuffer, this.setCallReducerFlags.deleteMessageFlags);
  }

  onDeleteMessage(callback: (ctx: ReducerEventContext, messageId: number) => void) {
    this.connection.onReducer("delete_message", callback);
  }

  removeOnDeleteMessage(callback: (ctx: ReducerEventContext, messageId: number) => void) {
    this.connection.offReducer("delete_message", callback);
  }

  erasePixel(id: bigint) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    ErasePixel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("erase_pixel", __argsBuffer, this.setCallReducerFlags.erasePixelFlags);
  }

  onErasePixel(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.onReducer("erase_pixel", callback);
  }

  removeOnErasePixel(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.offReducer("erase_pixel", callback);
  }

  joinBoard(boardId: number) {
    const __args = { boardId };
    let __writer = new BinaryWriter(1024);
    JoinBoard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_board", __argsBuffer, this.setCallReducerFlags.joinBoardFlags);
  }

  onJoinBoard(callback: (ctx: ReducerEventContext, boardId: number) => void) {
    this.connection.onReducer("join_board", callback);
  }

  removeOnJoinBoard(callback: (ctx: ReducerEventContext, boardId: number) => void) {
    this.connection.offReducer("join_board", callback);
  }

  leaveBoard() {
    this.connection.callReducer("leave_board", new Uint8Array(0), this.setCallReducerFlags.leaveBoardFlags);
  }

  onLeaveBoard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("leave_board", callback);
  }

  removeOnLeaveBoard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("leave_board", callback);
  }

  sendMessage(content: string) {
    const __args = { content };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, content: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, content: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setColor(color: string) {
    const __args = { color };
    let __writer = new BinaryWriter(1024);
    SetColor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_color", __argsBuffer, this.setCallReducerFlags.setColorFlags);
  }

  onSetColor(callback: (ctx: ReducerEventContext, color: string) => void) {
    this.connection.onReducer("set_color", callback);
  }

  removeOnSetColor(callback: (ctx: ReducerEventContext, color: string) => void) {
    this.connection.offReducer("set_color", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  setTool(tool: ToolType) {
    const __args = { tool };
    let __writer = new BinaryWriter(1024);
    SetTool.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_tool", __argsBuffer, this.setCallReducerFlags.setToolFlags);
  }

  onSetTool(callback: (ctx: ReducerEventContext, tool: ToolType) => void) {
    this.connection.onReducer("set_tool", callback);
  }

  removeOnSetTool(callback: (ctx: ReducerEventContext, tool: ToolType) => void) {
    this.connection.offReducer("set_tool", callback);
  }

}

export class SetReducerFlags {
  addPixelFlags: CallReducerFlags = 'FullUpdate';
  addPixel(flags: CallReducerFlags) {
    this.addPixelFlags = flags;
  }

  clearBoardFlags: CallReducerFlags = 'FullUpdate';
  clearBoard(flags: CallReducerFlags) {
    this.clearBoardFlags = flags;
  }

  createBoardFlags: CallReducerFlags = 'FullUpdate';
  createBoard(flags: CallReducerFlags) {
    this.createBoardFlags = flags;
  }

  deleteMessageFlags: CallReducerFlags = 'FullUpdate';
  deleteMessage(flags: CallReducerFlags) {
    this.deleteMessageFlags = flags;
  }

  erasePixelFlags: CallReducerFlags = 'FullUpdate';
  erasePixel(flags: CallReducerFlags) {
    this.erasePixelFlags = flags;
  }

  joinBoardFlags: CallReducerFlags = 'FullUpdate';
  joinBoard(flags: CallReducerFlags) {
    this.joinBoardFlags = flags;
  }

  leaveBoardFlags: CallReducerFlags = 'FullUpdate';
  leaveBoard(flags: CallReducerFlags) {
    this.leaveBoardFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setColorFlags: CallReducerFlags = 'FullUpdate';
  setColor(flags: CallReducerFlags) {
    this.setColorFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  setToolFlags: CallReducerFlags = 'FullUpdate';
  setTool(flags: CallReducerFlags) {
    this.setToolFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get board(): BoardTableHandle {
    return new BoardTableHandle(this.connection.clientCache.getOrCreateTable<Board>(REMOTE_MODULE.tables.board));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get pixel(): PixelTableHandle {
    return new PixelTableHandle(this.connection.clientCache.getOrCreateTable<Pixel>(REMOTE_MODULE.tables.pixel));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
